{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Сервер для управления пользователями и их заказами.",
        "title": "User Order API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получение списка пользователей с пагинацией и фильтрацией. Требуется аутентификация.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Получение всех пользователей",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Количество элементов на странице",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Минимальный возраст для фильтрации",
                        "name": "min_age",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Максимальный возраст для фильтрации",
                        "name": "max_age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по имени (без учета регистра, частичное совпадение)",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список пользователей",
                        "schema": {
                            "$ref": "#/definitions/user_model.PaginatedUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Регистрация нового пользователя с именем, email, возрастом и паролем.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Создание нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Пользователь успешно создан",
                        "schema": {
                            "$ref": "#/definitions/user_model.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные входные данные",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Пользователь с таким email уже существует",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получение информации о конкретном пользователе по его ID. Требуется аутентификация.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Получение пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о пользователе",
                        "schema": {
                            "$ref": "#/definitions/user_model.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат ID пользователя",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Обновление информации о существующем пользователе по ID. Требуется аутентификация. Пользователь может обновлять только свои данные, если он не является администратором (логика администратора здесь не реализована).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Обновление пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные пользователя для обновления",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/user_model.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные входные данные или неверный формат ID пользователя",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Запрещено (попытка обновить другого пользователя - упрощенная проверка)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email уже используется другим пользователем",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаление пользователя по его ID. Требуется аутентификация. Пользователь может удалить только свою учетную запись, если он не является администратором (логика администратора здесь не реализована).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Удаление пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Пользователь успешно удален"
                    },
                    "400": {
                        "description": "Неверный формат ID пользователя",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Запрещено (попытка удалить другого пользователя)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets paginated list of orders for a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get all orders for user",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "$ref": "#/definitions/order_model.PaginatedOrdersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query params or user ID format",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (attempt to access another user's orders)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new order for the authenticated user. Checks {id} in path against the authenticated user ID from token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create new order",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order data (product, quantity, price)",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order_model.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully created",
                        "schema": {
                            "$ref": "#/definitions/order_model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or invalid user ID format in URL",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (attempt to create order for another user)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}/orders/{orderID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gets specific order information by its ID for specified user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "Order ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order info",
                        "schema": {
                            "$ref": "#/definitions/order_model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (attempt to access another user's order)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found or access denied",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the order details for a specific order of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update an order",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "Order ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order update data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order_model.UpdateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated order",
                        "schema": {
                            "$ref": "#/definitions/order_model.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input or ID format",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (attempt to update another user's order)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found or access denied",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes order by ID for specified user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Delete an order",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "uint",
                        "description": "Order ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order deleted"
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden (attempt to delete another user's order)",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found or access denied",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Аутентификация пользователя с использованием email и пароля, возвращает JWT токен.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Аутентификация"
                ],
                "summary": "Вход пользователя",
                "parameters": [
                    {
                        "description": "Учетные данные для входа",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Вход выполнен успешно, включает JWT токен",
                        "schema": {
                            "$ref": "#/definitions/user_model.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные входные данные",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверные учетные данные",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/common_handler.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common_handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "order_model.CreateOrderRequest": {
            "type": "object",
            "required": [
                "price",
                "product_name",
                "quantity"
            ],
            "properties": {
                "price": {
                    "description": "Price per unit (must be positive)\nrequired: true\nexample: 1200.50",
                    "type": "number"
                },
                "product_name": {
                    "description": "Name of the product\nrequired: true\nexample: Laptop",
                    "type": "string"
                },
                "quantity": {
                    "description": "Quantity of the product (must be positive)\nrequired: true\nexample: 1",
                    "type": "integer"
                }
            }
        },
        "order_model.OrderResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "product_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "order_model.PaginatedOrdersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Number of items per page\nexample: 10",
                    "type": "integer"
                },
                "orders": {
                    "description": "List of orders on the current page",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/order_model.OrderResponse"
                    }
                },
                "page": {
                    "description": "Current page number\nexample: 1",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of orders matching the criteria\nexample: 50",
                    "type": "integer"
                }
            }
        },
        "order_model.UpdateOrderRequest": {
            "type": "object",
            "properties": {
                "price": {
                    "description": "New price per unit (must be positive, optional)\nexample: 1300.00",
                    "type": "number"
                },
                "product_name": {
                    "description": "New name of the product (optional)\nexample: Gaming Laptop",
                    "type": "string"
                },
                "quantity": {
                    "description": "New quantity (must be positive, optional)\nexample: 2",
                    "type": "integer"
                }
            }
        },
        "user_model.CreateUserRequest": {
            "type": "object",
            "required": [
                "age",
                "email",
                "name",
                "password"
            ],
            "properties": {
                "age": {
                    "description": "User's age (must be positive)\nrequired: true\nexample: 30",
                    "type": "integer"
                },
                "email": {
                    "description": "User's unique email address\nrequired: true\nexample: john.doe@example.com",
                    "type": "string"
                },
                "name": {
                    "description": "User's full name\nrequired: true\nexample: John Doe",
                    "type": "string"
                },
                "password": {
                    "description": "User's password (min 6 characters)\nrequired: true\nexample: password123",
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "user_model.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\nrequired: true",
                    "type": "string"
                },
                "password": {
                    "description": "User's password\nrequired: true",
                    "type": "string"
                }
            }
        },
        "user_model.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT authentication token",
                    "type": "string"
                }
            }
        },
        "user_model.PaginatedUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "description": "Number of items per page",
                    "type": "integer"
                },
                "page": {
                    "description": "Current page number",
                    "type": "integer"
                },
                "total": {
                    "description": "Total number of users matching the criteria",
                    "type": "integer"
                },
                "users": {
                    "description": "List of users on the current page",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user_model.UserResponse"
                    }
                }
            }
        },
        "user_model.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "User's age (must be positive, optional)",
                    "type": "integer"
                },
                "email": {
                    "description": "User's unique email address (optional)",
                    "type": "string"
                },
                "name": {
                    "description": "User's full name (optional)",
                    "type": "string"
                }
            }
        },
        "user_model.UserResponse": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Напиши \"Bearer\", пробел и JWT токен. Пример: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}