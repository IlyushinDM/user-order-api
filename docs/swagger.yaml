basePath: /api
definitions:
  handlers.ErrorResponse:
    properties:
      details:
        description: |-
          Optional details about the error
          example: Field 'email' is required
        type: string
      error:
        description: |-
          Error message
          example: Invalid input data
        type: string
    type: object
  models.CreateOrderRequest:
    properties:
      price:
        description: |-
          Price per unit (must be positive)
          required: true
          example: 1200.50
        type: number
      product_name:
        description: |-
          Name of the product
          required: true
          example: Laptop
        type: string
      quantity:
        description: |-
          Quantity of the product (must be positive)
          required: true
          example: 1
        type: integer
    required:
    - price
    - product_name
    - quantity
    type: object
  models.CreateUserRequest:
    properties:
      age:
        description: |-
          User's age (must be positive)
          required: true
          example: 30
        type: integer
      email:
        description: |-
          User's unique email address
          required: true
          example: john.doe@example.com
        type: string
      name:
        description: |-
          User's full name
          required: true
          example: John Doe
        type: string
      password:
        description: |-
          User's password (min 6 characters)
          required: true
          example: password123
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.LoginRequest:
    properties:
      email:
        description: |-
          User's email address
          required: true
          example: john.doe@example.com
        type: string
      password:
        description: |-
          User's password
          required: true
          example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        description: |-
          JWT authentication token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.OrderResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  models.PaginatedOrdersResponse:
    properties:
      limit:
        description: |-
          Number of items per page
          example: 10
        type: integer
      orders:
        description: List of orders on the current page
        items:
          $ref: '#/definitions/models.OrderResponse'
        type: array
      page:
        description: |-
          Current page number
          example: 1
        type: integer
      total:
        description: |-
          Total number of orders matching the criteria
          example: 50
        type: integer
    type: object
  models.PaginatedUsersResponse:
    properties:
      limit:
        description: |-
          Number of items per page
          example: 10
        type: integer
      page:
        description: |-
          Current page number
          example: 1
        type: integer
      total:
        description: |-
          Total number of users matching the criteria
          example: 100
        type: integer
      users:
        description: List of users on the current page
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
  models.UpdateOrderRequest:
    properties:
      price:
        description: |-
          New price per unit (must be positive, optional)
          example: 1300.00
        type: number
      product_name:
        description: |-
          New name of the product (optional)
          example: Gaming Laptop
        type: string
      quantity:
        description: |-
          New quantity (must be positive, optional)
          example: 2
        type: integer
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        description: |-
          User's age (must be positive, optional)
          example: 31
        type: integer
      email:
        description: |-
          User's unique email address (optional)
          example: johnathan.doe@example.com
        type: string
      name:
        description: |-
          User's full name (optional)
          example: Johnathan Doe
        type: string
    type: object
  models.UserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for managing users and their orders.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Order API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returns a JWT token.
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, includes JWT token
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /orders:
    get:
      description: Retrieve a paginated list of orders belonging to the currently
        authenticated user.
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of user's orders
          schema:
            $ref: '#/definitions/models.PaginatedOrdersResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders for the authenticated user
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order for the authenticated user.
      parameters:
      - description: Order data (product, quantity, price)
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /orders/{id}:
    delete:
      description: Delete an order by its ID. Requires authentication. User can only
        delete their own orders.
      parameters:
      - description: Order ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Order deleted successfully
        "400":
          description: Invalid order ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Orders
    get:
      description: Retrieve details of a specific order by its ID. Requires authentication.
        User can only retrieve their own orders.
      parameters:
      - description: Order ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order details
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Invalid order ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Update details of an existing order by its ID. Requires authentication.
        User can only update their own orders.
      parameters:
      - description: Order ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Order data to update
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Invalid input data or order ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order
      tags:
      - Orders
  /users:
    get:
      description: Retrieve a paginated and filtered list of users. Requires authentication.
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Minimum age filter
        in: query
        minimum: 1
        name: min_age
        type: integer
      - description: Maximum age filter
        in: query
        minimum: 1
        name: max_age
        type: integer
      - description: Name filter (case-insensitive, partial match)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/models.PaginatedUsersResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Register a new user with name, email, age, and password.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Delete a user by their ID. Requires authentication. User can only
        delete their own account unless they are an admin (admin logic not implemented
        here).
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden (trying to delete another user)
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Retrieve details of a specific user by their ID. Requires authentication.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update details of an existing user by ID. Requires authentication.
        User can only update their own details unless they are an admin (admin logic
        not implemented here).
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Invalid input data or user ID format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden (trying to update another user - simplistic check)
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Email already taken by another user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
