basePath: /
definitions:
  common_handler.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  order_model.CreateOrderRequest:
    properties:
      price:
        description: |-
          Price per unit (must be positive)
          required: true
          example: 1200.50
        type: number
      product_name:
        description: |-
          Name of the product
          required: true
          example: Laptop
        type: string
      quantity:
        description: |-
          Quantity of the product (must be positive)
          required: true
          example: 1
        type: integer
    required:
    - price
    - product_name
    - quantity
    type: object
  order_model.OrderResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  order_model.PaginatedOrdersResponse:
    properties:
      limit:
        description: |-
          Number of items per page
          example: 10
        type: integer
      orders:
        description: List of orders on the current page
        items:
          $ref: '#/definitions/order_model.OrderResponse'
        type: array
      page:
        description: |-
          Current page number
          example: 1
        type: integer
      total:
        description: |-
          Total number of orders matching the criteria
          example: 50
        type: integer
    type: object
  order_model.UpdateOrderRequest:
    properties:
      price:
        description: |-
          New price per unit (must be positive, optional)
          example: 1300.00
        type: number
      product_name:
        description: |-
          New name of the product (optional)
          example: Gaming Laptop
        type: string
      quantity:
        description: |-
          New quantity (must be positive, optional)
          example: 2
        type: integer
    type: object
  user_model.CreateUserRequest:
    properties:
      age:
        description: |-
          User's age (must be positive)
          required: true
          example: 30
        type: integer
      email:
        description: |-
          User's unique email address
          required: true
          example: john.doe@example.com
        type: string
      name:
        description: |-
          User's full name
          required: true
          example: John Doe
        type: string
      password:
        description: |-
          User's password (min 6 characters)
          required: true
          example: password123
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  user_model.LoginRequest:
    properties:
      email:
        description: |-
          User's email address
          required: true
        type: string
      password:
        description: |-
          User's password
          required: true
        type: string
    required:
    - email
    - password
    type: object
  user_model.LoginResponse:
    properties:
      token:
        description: JWT authentication token
        type: string
    type: object
  user_model.PaginatedUsersResponse:
    properties:
      limit:
        description: Number of items per page
        type: integer
      page:
        description: Current page number
        type: integer
      total:
        description: Total number of users matching the criteria
        type: integer
      users:
        description: List of users on the current page
        items:
          $ref: '#/definitions/user_model.UserResponse'
        type: array
    type: object
  user_model.UpdateUserRequest:
    properties:
      age:
        description: User's age (must be positive, optional)
        type: integer
      email:
        description: User's unique email address (optional)
        type: string
      name:
        description: User's full name (optional)
        type: string
    type: object
  user_model.UserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Сервер для управления пользователями и их заказами.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Order API
  version: "1.0"
paths:
  /api/users:
    get:
      description: Получение списка пользователей с пагинацией и фильтрацией. Требуется
        аутентификация.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Минимальный возраст для фильтрации
        in: query
        minimum: 1
        name: min_age
        type: integer
      - description: Максимальный возраст для фильтрации
        in: query
        minimum: 1
        name: max_age
        type: integer
      - description: Фильтр по имени (без учета регистра, частичное совпадение)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            $ref: '#/definitions/user_model.PaginatedUsersResponse'
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение всех пользователей
      tags:
      - Пользователи
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя с именем, email, возрастом и паролем.
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Некорректные входные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "409":
          description: Пользователь с таким email уже существует
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      summary: Создание нового пользователя
      tags:
      - Пользователи
  /api/users/{id}:
    delete:
      description: Удаление пользователя по его ID. Требуется аутентификация. Пользователь
        может удалить только свою учетную запись, если он не является администратором
        (логика администратора здесь не реализована).
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Запрещено (попытка удалить другого пользователя)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - Пользователи
    get:
      description: Получение информации о конкретном пользователе по его ID. Требуется
        аутентификация.
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение пользователя по ID
      tags:
      - Пользователи
    put:
      consumes:
      - application/json
      description: Обновление информации о существующем пользователе по ID. Требуется
        аутентификация. Пользователь может обновлять только свои данные, если он не
        является администратором (логика администратора здесь не реализована).
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Данные пользователя для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно обновлен
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Некорректные входные данные или неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Запрещено (попытка обновить другого пользователя - упрощенная
            проверка)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "409":
          description: Email уже используется другим пользователем
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление пользователя
      tags:
      - Пользователи
  /api/users/{id}/orders:
    get:
      description: Gets paginated list of orders for a user.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of orders
          schema:
            $ref: '#/definitions/order_model.PaginatedOrdersResponse'
        "400":
          description: Invalid query params or user ID format
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Forbidden (attempt to access another user's orders)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders for user
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Creates a new order for the authenticated user. Checks {id} in
        path against the authenticated user ID from token.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Order data (product, quantity, price)
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order successfully created
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Invalid input or invalid user ID format in URL
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Forbidden (attempt to create order for another user)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new order
      tags:
      - Orders
  /api/users/{id}/orders/{orderID}:
    delete:
      description: Deletes order by ID for specified user.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Order ID
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Order deleted
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Forbidden (attempt to delete another user's order)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Orders
    get:
      description: Gets specific order information by its ID for specified user.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Order ID
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order info
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Forbidden (attempt to access another user's order)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Updates the order details for a specific order of a user.
      parameters:
      - description: User ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Order ID
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      - description: Order update data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_model.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated order
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Invalid input or ID format
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Forbidden (attempt to update another user's order)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Order not found or access denied
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an order
      tags:
      - Orders
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя с использованием email и пароля, возвращает
        JWT токен.
      parameters:
      - description: Учетные данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user_model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Вход выполнен успешно, включает JWT токен
          schema:
            $ref: '#/definitions/user_model.LoginResponse'
        "400":
          description: Некорректные входные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      summary: Вход пользователя
      tags:
      - Аутентификация
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Напиши "Bearer", пробел и JWT токен. Пример: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
