basePath: /
definitions:
  common_handler.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  order_model.CreateOrderRequest:
    properties:
      price:
        description: Цена за единицу (положительное число)
        type: number
      product_name:
        description: Название продукта (обязательно)
        type: string
      quantity:
        description: Количество (положительное число)
        type: integer
    required:
    - price
    - product_name
    - quantity
    type: object
  order_model.OrderResponse:
    properties:
      id:
        type: integer
      price:
        type: number
      product_name:
        type: string
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  order_model.PaginatedOrdersResponse:
    properties:
      limit:
        description: Количество элементов на странице
        type: integer
      orders:
        description: Список заказов
        items:
          $ref: '#/definitions/order_model.OrderResponse'
        type: array
      page:
        description: Текущая страница
        type: integer
      total:
        description: Общее количество заказов
        type: integer
    type: object
  order_model.UpdateOrderRequest:
    properties:
      price:
        description: Новая цена (опционально)
        type: number
      product_name:
        description: Новое название продукта
        type: string
      quantity:
        description: Новое количество (опционально)
        type: integer
    type: object
  user_model.CreateUserRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  user_model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user_model.LoginResponse:
    properties:
      token:
        type: string
    type: object
  user_model.PaginatedUsersResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/user_model.UserResponse'
        type: array
    type: object
  user_model.UpdateUserRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      name:
        type: string
    type: object
  user_model.UserResponse:
    properties:
      age:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Сервер для управления пользователями и их заказами.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User Order API
  version: "1.0"
paths:
  /api/users:
    get:
      description: Получение списка пользователей с пагинацией и фильтрацией. Требуется
        аутентификация.
      parameters:
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Минимальный возраст для фильтрации
        in: query
        minimum: 1
        name: min_age
        type: integer
      - description: Максимальный возраст для фильтрации
        in: query
        minimum: 1
        name: max_age
        type: integer
      - description: Фильтр по имени (без учета регистра, частичное совпадение)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список пользователей
          schema:
            $ref: '#/definitions/user_model.PaginatedUsersResponse'
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение всех пользователей
      tags:
      - Пользователи
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя с именем, email, возрастом и паролем.
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно создан
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Некорректные входные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "409":
          description: Пользователь с таким email уже существует
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      summary: Создание нового пользователя
      tags:
      - Пользователи
  /api/users/{id}:
    delete:
      description: Удаление пользователя по его ID. Требуется аутентификация. Пользователь
        может удалить только свою учетную запись, если он не является администратором
        (логика администратора здесь не реализована).
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Запрещено (попытка удалить другого пользователя)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление пользователя
      tags:
      - Пользователи
    get:
      description: Получение информации о конкретном пользователе по его ID. Требуется
        аутентификация.
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение пользователя по ID
      tags:
      - Пользователи
    put:
      consumes:
      - application/json
      description: Обновление информации о существующем пользователе по ID. Требуется
        аутентификация. Пользователь может обновлять только свои данные, если он не
        является администратором (логика администратора здесь не реализована).
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Данные пользователя для обновления
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь успешно обновлен
          schema:
            $ref: '#/definitions/user_model.UserResponse'
        "400":
          description: Некорректные входные данные или неверный формат ID пользователя
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Запрещено (попытка обновить другого пользователя - упрощенная
            проверка)
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "409":
          description: Email уже используется другим пользователем
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление пользователя
      tags:
      - Пользователи
  /api/users/{id}/orders:
    get:
      description: Возвращает список заказов пользователя с пагинацией
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Номер страницы
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Количество элементов на странице
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список заказов
          schema:
            $ref: '#/definitions/order_model.PaginatedOrdersResponse'
        "400":
          description: Некорректные параметры
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение всех заказов пользователя
      tags:
      - Заказы
    post:
      consumes:
      - application/json
      description: Создает новый заказ для аутентифицированного пользователя
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: Данные заказа
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Заказ успешно создан
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Некорректные входные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Создание нового заказа
      tags:
      - Заказы
  /api/users/{id}/orders/{orderID}:
    delete:
      description: Удаляет заказ пользователя по ID
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: ID заказа
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Заказ удален
        "400":
          description: Некорректный формат ID
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Заказ не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Удаление заказа
      tags:
      - Заказы
    get:
      description: Возвращает информацию о конкретном заказе пользователя
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: ID заказа
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о заказе
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Некорректный формат ID
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Заказ не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получение заказа по ID
      tags:
      - Заказы
    put:
      consumes:
      - application/json
      description: Обновляет информацию о заказе пользователя
      parameters:
      - description: ID пользователя
        format: uint
        in: path
        name: id
        required: true
        type: integer
      - description: ID заказа
        format: uint
        in: path
        name: orderID
        required: true
        type: integer
      - description: Данные для обновления
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order_model.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Обновленный заказ
          schema:
            $ref: '#/definitions/order_model.OrderResponse'
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Не авторизован
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "403":
          description: Доступ запрещен
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "404":
          description: Заказ не найден
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление заказа
      tags:
      - Заказы
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя с использованием email и пароля, возвращает
        JWT токен.
      parameters:
      - description: Учетные данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user_model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Вход выполнен успешно, включает JWT токен
          schema:
            $ref: '#/definitions/user_model.LoginResponse'
        "400":
          description: Некорректные входные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/common_handler.ErrorResponse'
      summary: Вход пользователя
      tags:
      - Аутентификация
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: 'Напиши "Bearer", пробел и JWT токен. Пример: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
